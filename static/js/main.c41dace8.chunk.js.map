{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","readyState","fetchJsonFiles","axios","get","then","res","locationDictionary","locsShorthand","data","i","length","setState","statusData","this","now","Date","console","log","lastWebsiteUpdateTime","shouldUpdateFile","lastScrapeUpdate","parse","statusVal","available","statuses","locEntry","locDetails","push","getCard","status","lastUpdateTimeTextVal","apptTextVal","secondsAgo","Math","floor","minutesAgo","hoursAgo","lastUpdateTimeText","apptText","updateDataAndState","timerID","setInterval","clearInterval","className","style","fontSize","color","index","name","details","url","Card","width","marginLeft","marginRight","marginBottom","Body","Title","fontWeight","Text","lineHeight","split","map","item","Button","variant","target","href","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c41dace8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    \n    this.state = ({\n      readyState: 0\n    });\n\n    this.fetchJsonFiles();\n  }\n\n  fetchJsonFiles() {\n    axios.get('https://raw.githubusercontent.com/wa-vaccine/wa/master/vaccine_locations.json')\n    .then((res) => {\n      var locationDictionary = {};\n\n      var locationsData = res.data;\n\n      var locsShorthand = locationsData[\"locations\"];\n      for(var i = 0; i < locsShorthand.length; i++) {\n        locationDictionary[locsShorthand[i][\"name\"] + \" \" + locsShorthand[i][\"url\"]] = locsShorthand[i];\n      }\n      if(this.state.readyState < 2) {\n        this.setState({\n          locationDictionary: locationDictionary,\n          readyState: this.state.readyState + 1\n        });\n      }\n    });\n    axios.get(\"https://raw.githubusercontent.com/wa-vaccine/wa/master/vaccine_statuses.json\")\n    .then((res) => {\n      if(this.state.readyState < 2) {\n        this.setState({\n          statusData: res.data,\n          readyState: this.state.readyState + 1\n        });\n      }\n    });\n  }\n\n  updateDataAndState() {\n    if(this.state.readyState !== 2) {\n      return;\n    }\n\n    var now = new Date();\n\n    axios.get(\"https://raw.githubusercontent.com/wa-vaccine/wa/master/last_update_stamp.json\")\n      .then((res) => {\n        console.log(\"COMPARE \");\n        console.log(\"1: \" + res.data[\"lastScrapeUpdate\"]);\n        console.log(\"2: \" + this.state.lastWebsiteUpdateTime);\n        if(res.data[\"lastScrapeUpdate\"] !== this.state.lastWebsiteUpdateTime) {\n          console.log(\"UPDATE\");\n          this.setState({\n            lastWebsiteUpdateTime: res.data[\"lastScrapeUpdate\"]\n          });\n          this.fetchJsonFiles();\n        }\n      });\n\n    var shouldUpdateFile = true;\n    if(this.lastScrapeUpdate != null) {\n      shouldUpdateFile = Date.parse(this.state.statusData[\"lastScrapeUpdate\"]) - this.lastScrapeUpdate !== 0; \n    }\n\n    if(shouldUpdateFile) {\n      this.lastScrapeUpdate = Date.parse(this.state.statusData[\"lastScrapeUpdate\"]);\n      var statusVal = [];\n\n      this.available = 0;\n      var statuses = this.state.statusData[\"statuses\"];\n      for(var i = 0; i < statuses.length; i++) {\n        var data = statuses[i][\"serialized\"];\n\n        if(data[\"availability\"] === \"AVAILABLE\") {\n          this.available++;\n          var locEntry = this.state.locationDictionary[statuses[i][\"loc\"]];\n          var locDetails = locEntry[\"county\"] + \"\\n\" + (locEntry[\"address\"] === \"\" ? locEntry[\"city\"] : locEntry[\"address\"]) + \"\\n\" + locEntry[\"phoneNumber\"] + \"\\n\" + locEntry[\"email\"];\n\n          statusVal.push(this.getCard(i + 1, locEntry[\"name\"], locDetails, data[\"currentUrl\"]));\n        }\n      }\n\n      this.setState({\n          status: statusVal\n      });\n    }\n\n    var secondsAgo = Math.floor((now - this.lastScrapeUpdate) / 1000);\n    var minutesAgo = Math.floor(secondsAgo / 60);\n    var hoursAgo = Math.floor(minutesAgo / 60);\n\n    var lastUpdateTimeTextVal;\n    if(secondsAgo < 60) {\n      lastUpdateTimeTextVal = \"Last updated \" + secondsAgo + \" second\" + (secondsAgo === 1 ? \"\" : \"s\") + \" ago\"\n    } else if(minutesAgo < 60) {\n      lastUpdateTimeTextVal = \"Last updated \" + minutesAgo + \" minute\" + (minutesAgo === 1 ? \"\" : \"s\") + \" ago\"\n    } else {\n      lastUpdateTimeTextVal = \"Last updated \" + hoursAgo + \" hour\" + (hoursAgo === 1 ? \"\" : \"s\") + \" ago\"  \n    }\n\n    var apptTextVal;\n    if(this.available === 0) {\n      apptTextVal = \"There are currently no locations that are accepting appointments.\"\n    } else if (this.available === 1) {\n      apptTextVal = \"There is currently 1 location that is accepting appointments:\";\n    } else {\n      apptTextVal = \"There are currently \" + this.available + \" locations that are accepting appointments:\";\n    }\n\n    this.setState({\n      lastUpdateTimeText: lastUpdateTimeTextVal,\n      apptText: apptTextVal\n    });\n  }\n\n  componentDidMount() {\n    this.updateDataAndState();\n\n    this.timerID = setInterval(\n      () => {\n        this.updateDataAndState();\n      }, 1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <br></br>\n          <h1 style={{fontSize: \"1.8em\"}}>\n            Where can I get the vaccine?\n          </h1>\n          <h3 style={{fontSize: \"0.7em\"}}>\n            WASHINGTON STATE\n            <br></br>\n            Currently available for ages 65 years and older.\n          </h3>\n          <br></br>\n          <p style={{fontSize: \"1em\"}}>\n            {this.state.readyState !== 2 ? \"Loading...\" : this.state.apptText}\n          </p>\n        </header>\n        <body>\n          {this.state.status}\n        </body>\n        <p style={{fontSize: \"1em\", color: \"#cccccc\"}}>\n            {this.state.lastUpdateTimeText}\n          </p>\n      </div>\n    );\n  }\n\n  getCard(index, name, details, url) {\n    return (\n      <Card style={{ width: '95%', marginLeft: \"2.5%\", marginRight: \"2.5%\", marginBottom: \"0.8rem\" }}>\n            <Card.Body>\n              <Card.Title style={{fontWeight: \"bold\"}}>{index}. {name}</Card.Title>\n              <Card.Text style={{marginLeft: \"1.5rem\", lineHeight: \"1rem\"}}>\n                {details.split(\"\\n\").map((item, i) => <p key={i}>{item}</p>)}\n              </Card.Text>\n              <Button style={{ width: '100%' }} variant=\"primary\" target=\"_blank\" href={url}>Visit site</Button>\n            </Card.Body>\n          </Card>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}